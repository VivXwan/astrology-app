# app.py
from fastapi import FastAPI, HTTPException, Depends, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel, validator, EmailStr
import swisseph as swe
from dotenv import load_dotenv
import os
from typing import Dict, Optional
from datetime import datetime, timedelta, timezone


load_dotenv()
app = FastAPI(title="Astrology Chart API", description="Vedic astrology charts with True Chitrapaksha Ayanamsa and timezone support", version="1.0.0")
swe.set_ephe_path('./ephe')

app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000"],  # Frontend URL
    allow_credentials=True,
    allow_methods=["GET", "POST", "OPTIONS"],  # Explicitly allow OPTIONS
    allow_headers=["*"],  # Allow all headers
)

class BirthData(BaseModel):
    year: int
    month: int
    day: int
    hour: float
    minute: float
    latitude: float
    longitude: float

    @validator('month')
    def validate_month(cls, v): return v if 1 <= v <= 12 else raise_(ValueError("Month 1-12"))
    @validator('day')
    def validate_day(cls, v): return v if 1 <= v <= 31 else raise_(ValueError("Day 1-31"))
    @validator('hour')
    def validate_hour(cls, v): return v if 0 <= v < 24 else raise_(ValueError("Hour 0-23.99"))
    @validator('minute')
    def validate_minute(cls, v): return v if 0 <= v < 60 else raise_(ValueError("Minute 0-59.99"))
    @validator('latitude')
    def validate_latitude(cls, v): return v if -90 <= v <= 90 else raise_(ValueError("Latitude -90 to 90"))
    @validator('longitude')
    def validate_longitude(cls, v): return v if -180 <= v <= 180 else raise_(ValueError("Longitude -180 to 180"))

class CustomAyanamsaData(BaseModel):
    name: str
    value: float

    @validator('value')
    def validate_value(cls, v): return v if 0 <= v < 360 else raise_(ValueError("Ayanamsa value must be 0-359.99"))

ZODIAC_SIGNS = ["Aries", "Taurus", "Gemini", "Cancer", "Leo", "Virgo", "Libra", "Scorpio", "Sagittarius", "Capricorn", "Aquarius", "Pisces"]
NAKSHATRAS = [
    "Ashwini", "Bharani", "Krittika", "Rohini", "Mrigashira", "Ardra", "Punarvasu", "Pushya", "Ashlesha",
    "Magha", "Purva Phalguni", "Uttara Phalguni", "Hasta", "Chitra", "Swati", "Vishakha", "Anuradha", "Jyeshtha",
    "Mula", "Purva Ashadha", "Uttara Ashadha", "Shravana", "Dhanishta", "Shatabhisha", "Purva Bhadrapada", "Uttara Bhadrapada", "Revati"
]

# Vimshottari Dasha planetary sequence and durations
VIMSHOTTARI_PLANETS = ["Ketu", "Venus", "Sun", "Moon", "Mars", "Rahu", "Jupiter", "Saturn", "Mercury"]
VIMSHOTTARI_DURATIONS = {
    "Ketu": 7, "Venus": 20, "Sun": 6, "Moon": 10, "Mars": 7,
    "Rahu": 18, "Jupiter": 16, "Saturn": 19, "Mercury": 17
}

NAKSHATRA_SPAN = 13 + 20 / 60  # 13.3333 degrees
NAKSHATRA_PADA_SPAN = 3 + 20 / 60  # 3.3333 degrees
DAYS_PER_YEAR = 365.2422  # As specified

NAKSHATRA_TO_PLANET = [
    "Ketu", "Venus", "Sun", "Moon", "Mars", "Rahu", "Jupiter", "Saturn", "Mercury"
]

NAKSHATRA_BOUNDARIES = [(i * NAKSHATRA_SPAN, (i + 1) * NAKSHATRA_SPAN) for i in range(27)]

AYANAMSA_TYPES = {
    "true_chitra": swe.SIDM_TRUE_CITRA,
    "lahiri": swe.SIDM_LAHIRI,
    "raman": swe.SIDM_RAMAN,
    "krishnamurti": swe.SIDM_KRISHNAMURTI
}

def decimal_to_dms(decimal: float) -> str:
    degrees = int(decimal)
    minutes_decimal = (decimal - degrees) * 60
    minutes = int(minutes_decimal)
    seconds = int((minutes_decimal - minutes) * 60)
    return f"{degrees}° {minutes}' {seconds}\""

def get_ayanamsa_value(jd: float, ayanamsa_type: Optional[str]) -> float:
    if ayanamsa_type is None:
        swe.set_sid_mode(swe.SIDM_TRUE_CITRA, 0, 0)
        return swe.get_ayanamsa_ut(jd)
    elif ayanamsa_type.lower() in AYANAMSA_TYPES:
        swe.set_sid_mode(AYANAMSA_TYPES[ayanamsa_type.lower()], 0, 0)
        return swe.get_ayanamsa_ut(jd)
    else:
        raise HTTPException(status_code=400, detail=f"Invalid Ayanamsa type: {ayanamsa_type}")

def calculate_planet_positions(data: BirthData, jd: float, ayanamsa: float, ayanamsa_type: Optional[str]) -> Dict:
    """
    Calculate sidereal positions for planets and lagna given a Julian Day and ayanamsa.
    Returns a dictionary with planetary data (longitude, sign, nakshatra, pada).
    """
    try:
        cusps, ascmc = swe.houses(jd, data.latitude, data.longitude, b'P')
        sidereal_cusps = [(c - ayanamsa) % 360 for c in cusps]
        sidereal_asc = (cusps[0] - ayanamsa) % 360
        sidereal_mc = (ascmc[1] - ayanamsa) % 360
        
        planets = {}
        planet_list = [(0, "Sun"), (1, "Moon"), (2, "Mercury"), (3, "Venus"), (4, "Mars"),
                    (5, "Jupiter"), (6, "Saturn"), (10, "Rahu")]  # Ketu computed from Rahu

        # Lagna(Ascendant)
        lagna_sign_index = int(sidereal_asc / 30)
        lagna_nakshatra_index = int(sidereal_asc / NAKSHATRA_SPAN)
        lagna_pada = int((sidereal_asc % NAKSHATRA_SPAN) / NAKSHATRA_PADA_SPAN) + 1
        planets["Lagna"] = {
            "longitude": float(sidereal_asc),
            "longitude_dms": decimal_to_dms(sidereal_asc),
            "sign": ZODIAC_SIGNS[lagna_sign_index],
            "degrees_in_sign": float(sidereal_asc % 30),
            "degrees_in_sign_dms": decimal_to_dms(sidereal_asc % 30),
            "nakshatra": NAKSHATRAS[lagna_nakshatra_index],
            "pada": int(lagna_pada)
        }

        for pid, name in planet_list:
            flags = swe.FLG_SWIEPH
            if pid == 10:  # True node for Rahu
                flags |= swe.FLG_TRUEPOS
            trop_longitude = swe.calc_ut(jd, pid, flags)[0][0]
            sid_longitude = (trop_longitude - ayanamsa) % 360
            sign_index = int(sid_longitude / 30)
            nakshatra_deg = sid_longitude % 360
            nakshatra_index = int(nakshatra_deg / NAKSHATRA_SPAN)
            nakshatra_name = NAKSHATRAS[nakshatra_index]
            pada = int((nakshatra_deg % NAKSHATRA_SPAN) / NAKSHATRA_PADA_SPAN) + 1

            planets[name] = {
                "longitude": float(sid_longitude),
                "longitude_dms": decimal_to_dms(sid_longitude),
                "sign": ZODIAC_SIGNS[sign_index],
                "degrees_in_sign": float(sid_longitude % 30),
                "degrees_in_sign_dms": decimal_to_dms(sid_longitude % 30),
                "nakshatra": nakshatra_name,
                "pada": int(pada)
            }

        # Compute Ketu (180° opposite Rahu)
        ketu_long = (planets["Rahu"]["longitude"] + 180) % 360
        ketu_sign_index = int(ketu_long / 30)
        ketu_nakshatra_index = int(ketu_long / NAKSHATRA_SPAN)
        ketu_pada = int((ketu_long % NAKSHATRA_SPAN) / NAKSHATRA_PADA_SPAN) + 1
        planets["Ketu"] = {
            "longitude": float(ketu_long),
            "longitude_dms": decimal_to_dms(ketu_long),
            "sign": ZODIAC_SIGNS[ketu_sign_index],
            "degrees_in_sign": float(ketu_long % 30),
            "degrees_in_sign_dms": decimal_to_dms(ketu_long % 30),
            "nakshatra": NAKSHATRAS[ketu_nakshatra_index],
            "pada": int(ketu_pada)
        }

        return {
                "ayanamsa": float(ayanamsa),
                "ayanamsa_type": ayanamsa_type if ayanamsa_type else "true_chitra",
                "ascendant": {
                    "longitude": float(sidereal_asc),
                    "longitude_dms": decimal_to_dms(sidereal_asc),
                    "sign": ZODIAC_SIGNS[int(sidereal_asc / 30)]},
                "houses": [float(c) for c in sidereal_cusps],
                "houses_dms": [decimal_to_dms(c) for c in sidereal_cusps],
                "midheaven": float(sidereal_mc),
                "midheaven_dms": decimal_to_dms(sidereal_mc),
                "planets": planets
            }
    except ValueError as e:
        raise HTTPException(status_code=400, detail=f"Calculation error: {str(e)}")

def calculate_kundali(data: BirthData, tz_offset: float, ayanamsa_type: Optional[str]) -> Dict:

    jd = swe.julday(data.year, data.month, data.day, data.hour + data.minute / 60.0 - tz_offset)
    ayanamsa = get_ayanamsa_value(jd, ayanamsa_type)
    
    # Calculate planetary positions
    kundali = calculate_planet_positions(data, jd, ayanamsa, ayanamsa_type)
    
    kundali["tz_offset"] = tz_offset
    
    return kundali

def calculate_transits(data: BirthData, tz_offset: float, date_time: Optional[datetime] = None, ayanamsa_type: Optional[str] = None) -> Dict:
    if date_time is None:
        date_time = datetime.now(timezone.utc)  # Use UTC for consistency with Swiss Ephemeris

    # Compute Julian Day for the given date/time
    jd = swe.julday(date_time.year, date_time.month, date_time.day, 
                    date_time.hour + date_time.minute / 60.0 + date_time.second / 3600.0 - tz_offset)
    ayanamsa = get_ayanamsa_value(jd, ayanamsa_type)

    # Calculate planetary positions
    transits = calculate_planet_positions(data, jd, ayanamsa, ayanamsa_type)

    transits["tz_offset"] = tz_offset
    transits["transit_date"] = date_time.strftime("%Y-%m-%d %H:%M:%S")

    return transits

# app.py (only the updated function)
def calculate_navamsa(kundali_data: Dict) -> Dict:
    navamsa_planets = {}
    # Define starting signs by element
    element_starts = {
        "fire": 0,   # Aries for Fire signs (Aries, Leo, Sagittarius)
        "earth": 9,  # Capricorn for Earth signs (Taurus, Virgo, Capricorn)
        "air": 6,    # Libra for Air signs (Gemini, Libra, Aquarius)
        "water": 3   # Cancer for Water signs (Cancer, Scorpio, Pisces)
    }
    sign_elements = [
    "fire", "earth", "air", "water"
]
    # sign_elements = {
    #     0: "fire",   # Aries
    #     1: "earth",  # Taurus
    #     2: "air",    # Gemini
    #     3: "water",  # Cancer
    #     4: "fire",   # Leo
    #     5: "earth",  # Virgo
    #     6: "air",    # Libra
    #     7: "water",  # Scorpio
    #     8: "fire",   # Sagittarius
    #     9: "earth",  # Capricorn
    #     10: "air",   # Aquarius
    #     11: "water"  # Pisces
    # }
    
    for planet, data in kundali_data["planets"].items():
        sid_longitude = data["longitude"]
        degrees_in_sign = sid_longitude % 30
        segment = int(degrees_in_sign / (30.0 / 9))  # 0-8
        orig_sign = int(sid_longitude / 30)
        element = sign_elements[(orig_sign+1)%4-1]
        start_sign = element_starts[element]
        new_sign_idx = (start_sign + segment) % 12
        navamsa_planets[planet] = {
            "navamsa_sign": ZODIAC_SIGNS[new_sign_idx],
            "navamsa_sign_index": new_sign_idx
        }
    return navamsa_planets

def calculate_vimshottari_dasha(birth_data: BirthData, moon_data: Dict) -> list:
    # Step 1: Identify Moon's Nakshatra and degree within it
    # moon_nakshatra = moon_data["nakshatra"]
    # nakshatra_index = NAKSHATRAS.index(moon_nakshatra)
    moon_longitude = moon_data["longitude"]
    nakshatra_index = None
    for i, (start, end) in enumerate(NAKSHATRA_BOUNDARIES):
        if start <= moon_longitude < end:
            nakshatra_index = i
            break
    if nakshatra_index is None:
        nakshatra_index = 26  # Revati (last Nakshatra) if at 360°
    # nakshatra_deg = moon_data["longitude"] % 13.3333  # Degree within Nakshatra
    nakshatra_deg = moon_longitude - NAKSHATRA_BOUNDARIES[nakshatra_index][0]

    # Step 2: Map Nakshatra to starting Dasha planet
    starting_planet = NAKSHATRA_TO_PLANET[(nakshatra_index+1)%9-1]
    starting_planet_index = VIMSHOTTARI_PLANETS.index(starting_planet)

    # Step 3: Calculate balance of the first Dasha
    remaining_deg = NAKSHATRA_SPAN - nakshatra_deg
    proportion = remaining_deg / NAKSHATRA_SPAN
    total_duration = VIMSHOTTARI_DURATIONS[starting_planet]
    balance_years = proportion * total_duration
    balance_days = balance_years * DAYS_PER_YEAR

    # Step 4: Calculate elapsed time and start of first Mahadasha
    elapsed_years = total_duration - balance_years
    elapsed_days = elapsed_years * DAYS_PER_YEAR
    birth_date = datetime(birth_data.year, birth_data.month, birth_data.day)
    first_mahadasha_start = birth_date - timedelta(days=elapsed_days)
    first_mahadasha_end = first_mahadasha_start + timedelta(days=total_duration * DAYS_PER_YEAR)

    # Step 5: Generate Mahadasha timeline
    dasha_timeline = []
    current_date = first_mahadasha_start
    remaining_years = 120
    planet_index = starting_planet_index
    
    while remaining_years > 0:
        planet = VIMSHOTTARI_PLANETS[planet_index]
        duration = VIMSHOTTARI_DURATIONS[planet]
        if duration > remaining_years:
            duration = remaining_years
        end_date = current_date + timedelta(days=duration * 365.25)
        
        # Calculate Antardashas for this Mahadasha
        mahadasha_entry = {
            "planet": planet,
            "start_date": current_date.strftime("%Y-%m-%d"),
            "end_date": end_date.strftime("%Y-%m-%d"),
            "duration_years": round(duration, 2),
            "antardashas": []
        }
        
        antardasha_start = current_date
        for i in range(9):
            antardasha_planet = VIMSHOTTARI_PLANETS[(planet_index + i) % 9]
            antardasha_years = (duration * VIMSHOTTARI_DURATIONS[antardasha_planet]) / 120
            antardasha_days = antardasha_years * 365.25
            antardasha_end = antardasha_start + timedelta(days=antardasha_days)

            # Calculate Pratyantar Dashas for this Antardasha
            antardasha_pratyantar = []
            pratyantar_start = antardasha_start
            for j in range(9):
                pratyantar_planet = VIMSHOTTARI_PLANETS[(planet_index + i + j) % 9]
                pratyantar_years = (antardasha_years * VIMSHOTTARI_DURATIONS[pratyantar_planet]) / 120
                pratyantar_days = pratyantar_years * 365.25
                pratyantar_end = pratyantar_start + timedelta(days=pratyantar_days)
                antardasha_pratyantar.append({
                    "planet": pratyantar_planet,
                    "start_date": pratyantar_start.strftime("%Y-%m-%d"),
                    "end_date": pratyantar_end.strftime("%Y-%m-%d"),
                    "duration_days": round(pratyantar_days, 2)
                })
                pratyantar_start = pratyantar_end

            mahadasha_entry["antardashas"].append({
                "planet": antardasha_planet,
                "start_date": antardasha_start.strftime("%Y-%m-%d"),
                "end_date": antardasha_end.strftime("%Y-%m-%d"),
                "duration_years": round(antardasha_years, 2),
                "pratyantar_dashas": antardasha_pratyantar
            })
            antardasha_start = antardasha_end

        dasha_timeline.append(mahadasha_entry)
        current_date = end_date
        remaining_years -= duration
        planet_index = (planet_index + 1) % len(VIMSHOTTARI_PLANETS)

    return dasha_timeline

@app.post("/charts", response_model=Dict)
async def get_charts(
    data: BirthData,
    tz_offset: float = 5.5,
    transit_date: Optional[datetime] = None,
    ayanamsa_type: Optional[str] = None
):
    try:

        # Calculate Kundali, Navamsa, and Dasha
        kundali = calculate_kundali(data, tz_offset, ayanamsa_type)
        navamsa = calculate_navamsa(kundali)
        dasha = calculate_vimshottari_dasha(data, kundali["planets"]["Moon"])
        transits = calculate_transits(data, tz_offset, transit_date, ayanamsa_type)

        result = {"kundali": kundali, "navamsa": navamsa, "vimshottari_dasha": dasha, "transits": transits}
        return result
    except Exception as e:
        raise HTTPException(status_code=400, detail=str(e))

@app.get("/health")
async def health_check():
    return {"status": "healthy"}

def raise_(e): raise e